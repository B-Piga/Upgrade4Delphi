unit uAtualizador;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Buttons, Vcl.Graphics, idftpcommon,
  Vcl.ExtCtrls, IdFTP, IdException, IniFiles, ShellAPI, System.Zip, IdGlobal, IdFTPList,
  System.StrUtils, Enum, FireDAC.Phys.FBDef, FireDAC.Stan.Intf,
  FireDAC.Phys, FireDAC.Phys.IBBase, FireDAC.Phys.FB, FireDAC.Phys.PGDef,
  FireDAC.Phys.PG, FireDAC.Phys.MySQLDef, FireDAC.Phys.MySQL, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, Data.DB,
  FireDAC.Comp.Client, FireDAC.Comp.ScriptCommands, FireDAC.Stan.Util,
  FireDAC.Comp.Script, FireDAC.VCLUI.Wait, FireDAC.Comp.UI;

type
   TAtualizador = class
      private
         FIdFTP : TIdFTP;
         FUser,
         FPass,
         FHost,
         FDBName,
         FDBUser,
         FDBPass,
         FDBServer,
         FDBPort : String;
         FPort : Integer;
         FZip,
         FReiniciar, FBackup, FExe : Boolean;
         FBanco : TTipoBanco;
         FDriverFB : TFDPhysFBDriverLink;
         FDriverPG : TFDPhysPgDriverLink;
         FDriverMySQL : TFDPhysMySQLDriverLink;
         FConn : TFDConnection;
         FScript : TFDScript;
         FWaitCursor: TFDGUIxWaitCursor;
         function getDirExe : String;
         function getExeName : String;
         function ConectarFTP : Boolean;
         procedure Baixar;
         procedure ConfigurarFTP;
         procedure UnZip();
         procedure Reiniciar(AExe : String);
         procedure ListarScripts;
         procedure ConfigurarBanco;
         function ConectarBanco : Boolean;
         function LerScript(AStringList : TStringList) : Boolean;
         function RemoverScript(AStringList : TStringList) : Boolean;
         procedure BackupBd;
      public
         constructor Create(AZip, AReiniciar, ABackup, AExe : Boolean; ABanco : TTipoBanco);
         destructor Destroy(); override;
         function Execute() : Boolean;
         procedure DadosDB(ADataBaseName, AUser, APass, AServer, APort : String);
         procedure DadosFTP(AUser, APass, AHost : String ; APort : Integer);
   end;

implementation

procedure TAtualizador.BackupBd;
var
  BackupFileName,
  GbakCommand : String;
  GbakPath : String;
begin
  BackupFileName := getDirExe + getExeName + '.fdb';
  GbakPath := getDirExe + 'gbak.exe';
  GbakCommand := Format('"%s" -b -user %s -password %s "%s" "%s"', [
    GbakPath,  // Caminho para o gbak
    FDBUser,
    FDBPass,
    FDBName,
    BackupFileName
    ]);

  ShellExecute(0, 'OPEN', PChar('cmd.exe'), PChar('/C ' + GbakCommand), nil, SW_HIDE);
end;

constructor TAtualizador.Create(AZip, AReiniciar, ABackup, AExe : Boolean; ABanco : TTipoBanco);
begin
  FIdFTP             := TIdFTP.Create();
  FConn              := TFDConnection.Create(nil);
  FScript            := TFDScript.Create(FConn);
  FScript.Connection := FConn;
  FZip               := AZip;
  FReiniciar         := AReiniciar;
  FBanco             := ABanco;
  FBackup            := ABackup;
  FExe               := AExe;
end;

function TAtualizador.Execute() : Boolean;
begin
  try
    if not ConectarFTP then
    Exit;

    if FExe then    
    Baixar;

    if FZip then
    UnZip;

    if FBanco <> fpNone then
    begin
      ConectarBanco;
      if FBackup then
        BackupBd;
      ListarScripts;
    end;

    if FReiniciar then
    Reiniciar(ParamStr(0));

    Result := True;

  except
    On E: Exception do
    Result := False;
  end;
end;

procedure TAtualizador.UnZip();
var
  UnZipper: TZipFile;
  sZIPName: string;
begin
  sZIPName := getDirExe + getExeName +'.zip';

  UnZipper := TZipFile.Create();
  try
    UnZipper.Open(sZIPName, zmRead);
    UnZipper.ExtractAll(getDirExe);
    UnZipper.Close;
  finally
    FreeAndNil(UnZipper);
  end;
end;

procedure TAtualizador.DadosFTP(AUser, APass, AHost : String ; APort: Integer);
begin
  FUser := AUser;
  FPass := APass;
  FHost := AHost;
  FPort := APort;
end;

procedure TAtualizador.DadosDB(ADataBaseName, AUser, APass, AServer, APort: String);
begin
  FDBName   := ADataBaseName;
  FDBUser   := AUser;
  FDBPass   := APass;
  FDBServer := AServer;
  FDBPort   := APort;
end;

destructor TAtualizador.Destroy;
begin
  FreeAndNil(FIdFTP);
  FConn.Connected := False;
  FreeAndNil(FConn);
  FreeAndNil(FWaitCursor);
  inherited;
end;

procedure TAtualizador.Baixar;
begin
  try
    if FileExists(getDirExe + getExeName + '2.exe') then
      DeleteFile(getDirExe + getExeName + '2.exe');

    if FZip then
      if FileExists(getDirExe + getExeName + '.zip') then
        DeleteFile(getDirExe + getExeName + '.zip');

    if FileExists(getDirExe + getExeName + '.exe') then
      RenameFile(getDirExe + getExeName + '.exe', getDirExe + getExeName + '2.exe');

    if FZip then
    begin
      FidFTP.Get(getExeName + '.zip',
        getDirExe + getExeName + '.zip', True, True);
      UnZip();
    end
    else
    begin
      FidFTP.Get(getExeName + '.exe',
        getDirExe + getExeName + '.exe', True, True);
    end;

  except
    On E:Exception do
    begin
      if E is EIdConnClosedGracefully then
        Exit;
      ShowMessage('Erro ao baixar a atualização: ' + E.Message);
      Abort;
    end;
  end;
end;

function TAtualizador.getExeName;
begin
  Result := (ExtractFileName(Application.ExeName)).Replace('.exe','',[rfReplaceAll,rfIgnoreCase]);
end;

function TAtualizador.RemoverScript(AStringList : TStringList) : Boolean;
var
   i, PosicaoNomeArquivo : Integer;
   NomeArquivo : String;
begin
  for i := 0 to AStringList.Count - 1 do
  begin
    // Pego a posição atual onde começa o nome do arquivo
    // Tratativa feita por conta do que o .List retorna.
    PosicaoNomeArquivo := LastDelimiter(';', AStringList[i]);
    if PosicaoNomeArquivo > 0 then
    begin
      NomeArquivo := Trim(Copy(AStringList[i], PosicaoNomeArquivo + 1, MaxInt));
      if not StartsText('type=', NomeArquivo) then // Verifica se é realmente o nome do arquivo
      begin
        // Verifica extensão .sql e executo o script.
        if SameText(ExtractFileExt(NomeArquivo), '.sql') then
        begin
          try
            DeleteFile(getDirExe + NomeArquivo);
          except
            On E: Exception Do Continue;
          end;
        end;
      end;
    end;
  end;
end;

function TAtualizador.LerScript(AStringList: TStringList): Boolean;
var
   i, PosicaoNomeArquivo : Integer;
   NomeArquivo : String;
begin
  for i := 0 to AStringList.Count - 1 do
  begin
    // Pego a posição atual onde começa o nome do arquivo
    // Tratativa feita por conta do que o .List retorna.
    PosicaoNomeArquivo := LastDelimiter(';', AStringList[i]);
    if PosicaoNomeArquivo > 0 then
    begin
      NomeArquivo := Trim(Copy(AStringList[i], PosicaoNomeArquivo + 1, MaxInt));
      if not StartsText('type=', NomeArquivo) then // Verifica se é realmente o nome do arquivo
      begin
        // Verifica extensão .sql e executo o script.
        if SameText(ExtractFileExt(NomeArquivo), '.sql') then
        begin
          try
            with FScript do
            begin
              SQLScriptFileName := getDirExe + NomeArquivo;
              ValidateAll;
              ExecuteAll;
            end;
          except
            On E: Exception Do Continue;
          end;
        end;
      end;
    end;
  end;
end;

procedure TAtualizador.ListarScripts;
var
   LScripts : TStringList;
   I, PosicaoNomeArquivo : Integer;
   NomeArquivo : String;
begin
  LScripts := TStringList.Create();
  try
    FIdFTP.List(LScripts); // Obter lista de arquivos no diret�rio atual do FTP

    for i := 0 to LScripts.Count - 1 do
    begin
      // Pego a posição atual onde começa o nome do arquivo
      // Tratativa feita por conta do que o .List retorna.
      PosicaoNomeArquivo := LastDelimiter(';', LScripts[i]);
      if PosicaoNomeArquivo > 0 then
      begin
        NomeArquivo := Trim(Copy(LScripts[i], PosicaoNomeArquivo + 1, MaxInt));
        if not StartsText('type=', NomeArquivo) then // Verifica se é realmente o nome do arquivo
        begin
          // Verifica extensão .sql e realiza o download
          if SameText(ExtractFileExt(NomeArquivo), '.sql') then
          begin
            FIdFTP.Get(NomeArquivo, getDirExe + NomeArquivo, True, True);
          end;
        end;
      end;
    end;

    // Após baixar todos os arquivos executa todos os scripts
    try
      LerScript(LScripts);
    except
      On E: Exception do
        ShowMessage('Erro ao atualizar banco de dados!'+#13+E.Message);
    end;

    // Após execução dos scripts, exclui os arquivos baixados.
    try
      RemoverScript(LScripts);
    except
      On E: Exception do
        ShowMessage('Erro ao deletar scripts!'+#13+E.Message);
    end;
  finally
    LScripts.Free;
  end;
end;

procedure TAtualizador.Reiniciar(AExe: String);
var
   handle : HWND;
begin
  ShellExecute(handle,'open',PChar(AExe),nil,nil,SW_ShowNormal);
  Application.Terminate;
end;

function TAtualizador.getDirExe: string;
begin
  Result := ExtractFilePath(Application.ExeName);
end;

procedure TAtualizador.ConfigurarBanco;
begin
  FConn.Params.Database := FDBName;
  FConn.Params.UserName := FDBUser;
  FConn.Params.Password := FDBPass;
  FConn.Params.Add('Port='+FDBPort);
  FConn.Params.Add('Server='+FDBServer);
  FConn.LoginPrompt := False;

  case FBanco of
    fpFirebird : FConn.DriverName := 'FB';
    fpMySQL    : FConn.DriverName := 'MySQL';
    fpPostGre  : FConn.DriverName := 'PG';
  end;
end;

procedure TAtualizador.ConfigurarFTP();
begin
  FidFTP.Username     := FUser;
  FidFTP.Password     := FPass;
  FidFTP.Host         := FHost;
  FidFTP.Port         := FPort;
  FidFTP.Passive      := True;
  FidFTP.TransferType := ftBinary;
end;

function TAtualizador.ConectarBanco : Boolean;
begin
  ConfigurarBanco;

  if FConn.Connected then
    FConn.Connected := not FConn.Connected;
  try
    FConn.Connected := not FConn.Connected;
    Result := True;
  except
    On E: Exception do
    begin
      ShowMessage('Falha na conexão com o Banco de Dados: ' + E.Message);
      Result := False;
    end;

  end;
end;

function TAtualizador.ConectarFTP : Boolean;
begin
  ConfigurarFTP;

  if FidFTP.Connected then
    FidFTP.Disconnect;
  try
    FidFTP.Connect;
    Result := True;
  except
    On E:Exception do
    begin
      ShowMessage('Falha na conexão com o FTP: ' + E.Message);
      Result := False;
    end;
  end;
end;

end.
